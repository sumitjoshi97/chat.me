{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","use","exposedHeaders","bodyParser","json","limit","set","__dirname","get","req","res","send","wss","WebSocketServer","Server","clients","on","connection","console","log","userId","length","newClient","ws","push","message","filter","client","next","people","setInterval","forEach","msg","port","listen","process","env","PORT","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEA;;AAEAA,IAAII,GAAJ,CAAQ,oBAAK;AACTC,oBAAgB;AADP,CAAL,CAAR;AAGAL,IAAII,GAAJ,CAAQE,qBAAWC,IAAX,CAAgB;AACpBC,WAAO;AADa,CAAhB,CAAR;AAGAR,IAAIS,GAAJ,CAAQ,MAAR,EAAgBC,SAAhB;;AAEAV,IAAIW,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvB,WAAOA,IAAIC,IAAJ,CAAS,OAAT,CAAP;AACH,CAFD;;AAIAd,IAAIe,GAAJ,GAAU,IAAIC,cAAgBC,MAApB,CAA2B;AACjChB,YAAQD,IAAIC;AADqB,CAA3B,CAAV;;AAIA,IAAIiB,UAAU,EAAd;;AAGAlB,IAAIe,GAAJ,CAAQI,EAAR,CAAW,YAAX,EAAyB,UAACC,UAAD,EAAgB;AACrCC,YAAQC,GAAR,CAAY,sBAAZ;;AAEA,QAAMC,SAASL,QAAQM,MAAvB;;AAEA;AACA,QAAMC,YAAY;AACdC,YAAIN,UADU;AAEdG,gBAAQA;;AAGZ;AALkB,KAAlB,CAMAL,QAAQS,IAAR,CAAaF,SAAb;AACAJ,YAAQC,GAAR,CAAY,kBAAZ,EAAgCC,MAAhC;;AAEA;AACAH,eAAWD,EAAX,CAAc,SAAd,EAAyB,UAACS,OAAD,EAAa;AAClCP,gBAAQC,GAAR,CAAYM,OAAZ;;AAEA;AACAR,mBAAWN,IAAX,CAAgBc,OAAhB;AACH,KALD;;AAOAR,eAAWD,EAAX,CAAc,OAAd,EAAuB,YAAM;AACzBE,gBAAQC,GAAR,CAAY,qBAAZ,EAAmCC,MAAnC;;AAEAL,kBAAUA,QAAQW,MAAR,CAAe,UAACC,MAAD;AAAA,mBAAYA,OAAOP,MAAP,KAAkBA,MAA9B;AAAA,SAAf,CAAV;AACH,KAJD;AAKH,CA5BD;;AA8BAvB,IAAIW,GAAJ,CAAQ,sBAAR,EAAgC,UAACC,GAAD,EAAMC,GAAN,EAAWkB,IAAX,EAAoB;AAChD,WAAOlB,IAAIN,IAAJ,CAAS;AACZyB,gBAAQd;AADI,KAAT,CAAP;AAGH,CAJD;;AAMAe,YAAY,YAAM;;AAEd;AACA,QAAIf,QAAQM,MAAR,GAAiB,CAArB,EAAwB;AACpBH,gBAAQC,GAAR,iBAA0BJ,QAAQM,MAAlC;AACAN,gBAAQgB,OAAR,CAAgB,UAACJ,MAAD,EAAY;AACxB,gBAAMK,kBAAgBL,OAAOP,MAAvB,uCAAN;AACAO,mBAAOJ,EAAP,CAAUZ,IAAV,CAAeqB,GAAf;AACAd,oBAAQC,GAAR,CAAY,QAAZ;AACH,SAJD;AAKH;AACJ,CAXD;AAYA,IAAMc,OAAO,IAAb;AACApC,IAAIC,MAAJ,CAAWoC,MAAX,CAAkBC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBJ,IAAtC,EAA4C,YAAM;AAC9Cf,YAAQC,GAAR,CAAY,iBAAZ,EAA+BtB,IAAIC,MAAJ,CAAWwC,OAAX,GAAqBL,IAApD;AACH,CAFD;;kBAIepC,G","file":"index.js","sourcesContent":["import http from 'http';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport WebSocketServer from 'uws';\r\n\r\nconst app = express();\r\napp.server = http.createServer(app);\r\n\r\n// app.use(morgan);\r\n\r\napp.use(cors({\r\n    exposedHeaders: \"*\"\r\n}));\r\napp.use(bodyParser.json({\r\n    limit: '50mb'\r\n}));\r\napp.set('root', __dirname);\r\n\r\napp.get('/', (req, res) => {\r\n    return res.send('hello')\r\n})\r\n\r\napp.wss = new WebSocketServer.Server({\r\n    server: app.server\r\n})\r\n\r\nlet clients = [];\r\n\r\n\r\napp.wss.on('connection', (connection) => {\r\n    console.log('New Client connected');\r\n\r\n    const userId = clients.length;\r\n\r\n    //new client object\r\n    const newClient = {\r\n        ws: connection,\r\n        userId: userId\r\n    }\r\n\r\n    //new client added to clients array\r\n    clients.push(newClient);\r\n    console.log('new client added', userId)\r\n\r\n    //listen new messages from client\r\n    connection.on('message', (message) => {\r\n        console.log(message);\r\n\r\n        //after getting message from client, we send back to client with new message\r\n        connection.send(message)\r\n    })\r\n\r\n    connection.on('close', () => {\r\n        console.log('client disconnected', userId);\r\n\r\n        clients = clients.filter((client) => client.userId !== userId)\r\n    })\r\n})\r\n\r\napp.get('/api/all_connections', (req, res, next) => {\r\n    return res.json({\r\n        people: clients\r\n    })\r\n})\r\n\r\nsetInterval(() => {\r\n\r\n    // console.log(`threre are ${clients.length} in server connected`)\r\n    if (clients.length > 0) {\r\n        console.log(`threre are ${clients.length} in server connected`);\r\n        clients.forEach((client) => {\r\n            const msg = `Hey is ${client.userId} you got a new message from server`;\r\n            client.ws.send(msg);\r\n            console.log('client');\r\n        })\r\n    }\r\n})\r\nconst port = 3000;\r\napp.server.listen(process.env.PORT || port, () => {\r\n    console.log('running on port', app.server.address().port);\r\n})\r\n\r\nexport default app;"]}